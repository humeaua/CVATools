//
//  RandomNumberTests.cpp
//  CVATools
//
//  Created by Alexandre HUMEAU on 22/02/15.
//
//

#include "RegressionTests.h"

#include "BernouilliGenerator.h"

bool RegressionTest::Bernouilli() const
{
    long long seed = 0L;
    BernouilliGenerator bernouilli(seed, 0.5);
    
    size_t NRealisations = 1000;
    const double refValues[] = {1,1,0,1,0,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,0,0,1,0,0,1,1,0,1,1,1,1,1,1,0,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,1,1,0,1,1,1,1,0,0,1,0,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,1,0,1,1,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,0,0,1,1,1,1,0,0,1,1,0,1,0,0,1,1,1,1,1,0,1,0,1,1,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,1,0,1,0,0,0,1,1,0,0,0,1,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,1,0,1,1,1,1,1,0,0,0,1,1,0,0,1,0,1,1,1,0,0,0,0,1,0,1,0,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,1,1,0,0,1,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,0,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0,1,0,1,1,0,1,0,1,0,0,1,0,0,1,1,1,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,1,0,1,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,0,1,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,0,0,1,1,0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,1,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,1,1,0,0,1,0,1,0,0,0,1,1,0,0,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,1,0,0,0,1,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,0,0,1,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,1,1,1,0,1,1,0,0,1,1,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,1,0,1,1,0,0,1,0,0,0,0,0,1};
    
    double error = 0, sum = 0, stdev = 0;
    for (size_t i = 0 ; i < NRealisations ; ++i)
    {
        error += std::abs(refValues[i]-bernouilli());
        sum += refValues[i];
        stdev += refValues[i] * refValues[i];
    }
    
    sum /= NRealisations;
    stdev /= NRealisations;
    stdev -= sum * sum;
    
    m_out << "Average : " << sum << std::endl;
    m_out << "Stdev : " << stdev << std::endl;
    
    const double tolerance = 1e-10;
    
    if (error < tolerance)
    {
        m_out << "SUCCEEDED" << std::endl;
        return true;
    }
    else
    {
        m_out << "FAILED" << std::endl;
        return false;
    }
}